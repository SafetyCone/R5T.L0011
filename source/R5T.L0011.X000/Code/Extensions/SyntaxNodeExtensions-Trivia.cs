using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

using R5T.Magyar;

using R5T.L0011.X000;


namespace System
{
    public static partial class SyntaxNodeExtensions
    {
        public static TNode AddLeadingLeadingTrivia<TNode>(this TNode syntaxNode,
            IEnumerable<SyntaxTrivia> trivias)
            where TNode : SyntaxNode
        {
            var newLeadingTrivia = syntaxNode.HasLeadingTrivia
                ? syntaxNode.GetLeadingTrivia().AddLeadingTrivia(trivias)
                : new SyntaxTriviaList(trivias);

            var output = syntaxNode.WithLeadingTrivia(newLeadingTrivia);
            return output;
        }

        public static TNode AddLeadingLeadingTrivia<TNode>(this TNode syntaxNode,
            params SyntaxTrivia[] trivias)
            where TNode : SyntaxNode
        {
            var output = syntaxNode.AddLeadingLeadingTrivia(trivias.AsEnumerable());
            return output;
        }

        public static TNode AddLeadingLeadingTrivia<TNode>(this TNode syntaxNode,
            SyntaxTriviaList trivia)
            where TNode : SyntaxNode
        {
            var output = syntaxNode.AddLeadingLeadingTrivia(trivia.AsEnumerable());
            return output;
        }

        public static TNode AddLeadingTrivia<TNode>(this TNode syntaxNode, params SyntaxTrivia[] trivia)
            where TNode : SyntaxNode
        {
            var output = syntaxNode.AddLeadingLeadingTrivia(trivia);
            return output;
        }

        public static TNode AddTrailingLeadingTrivia<TNode>(this TNode syntaxNode,
            params SyntaxTrivia[] trivia)
            where TNode : SyntaxNode
        {
            var newLeadingTrivia = syntaxNode.HasLeadingTrivia
                ? syntaxNode.GetLeadingTrivia().AddTrailingTrivia(trivia)
                : new SyntaxTriviaList(trivia);

            var output = syntaxNode.WithLeadingTrivia(newLeadingTrivia);
            return output;
        }

        public static TNode AddTrailingTrailingTrivia<TNode>(this TNode syntaxNode,
            params SyntaxTrivia[] trivia)
            where TNode : SyntaxNode
        {
            var newTrailingTrivia = syntaxNode.HasTrailingTrivia
                ? syntaxNode.GetTrailingTrivia().AddTrailingTrivia(trivia)
                : new SyntaxTriviaList(trivia);

            var output = syntaxNode.WithTrailingTrivia(newTrailingTrivia);
            return output;
        }

        public static TNode AddLeadingTrailingTrivia<TNode>(this TNode syntaxNode,
            params SyntaxTrivia[] trivia)
            where TNode : SyntaxNode
        {
            var newTrailingTrivia = syntaxNode.HasTrailingTrivia
                ? syntaxNode.GetTrailingTrivia().AddLeadingTrivia(trivia)
                : new SyntaxTriviaList(trivia);

            var output = syntaxNode.WithTrailingTrivia(newTrailingTrivia);
            return output;
        }

        public static TNode AddTrailingTrivia<TNode>(this TNode syntaxNode,
            params SyntaxTrivia[] trivia)
            where TNode : SyntaxNode
        {
            var output = syntaxNode.AddTrailingTrailingTrivia(trivia);
            return output;
        }

        public static TNode AppendNewLine<TNode>(this TNode node)
            where TNode : SyntaxNode
        {
            var output = node.AddTrailingTrailingTrivia(SyntaxFactoryHelper.NewLine());
            return output;
        }

        public static SyntaxTriviaList GetSeparatingLeadingTrivia(this SyntaxNode syntaxNode)
        {
            var firstToken = syntaxNode.GetFirstToken();

            var output = firstToken.GetSeparatingLeadingTrivia();
            return output;
        }

        public static SyntaxTriviaList GetSeparatingTrailingTrivia(this SyntaxNode syntaxNode)
        {
            var lastToken = syntaxNode.GetLastToken();

            var output = lastToken.GetSeparatingTrailingTrivia();
            return output;
        }

        /// <summary>
        /// A blank line is generated by two consecutive new lines.
        /// </summary>
        public static TNode PrependBlankLine<TNode>(this TNode node)
            where TNode : SyntaxNode
        {
            var output = node.AddLeadingLeadingTrivia(
                SyntaxFactoryHelper.NewLine(),
                SyntaxFactoryHelper.NewLine());

            return output;
        }

        public static TNode PrependNewLine<TNode>(this TNode node)
            where TNode : SyntaxNode
        {
            var output = node.AddLeadingLeadingTrivia(SyntaxFactoryHelper.NewLine());
            return output;
        }

        public static TNode PrependNewLineIf<TNode>(this TNode node,
            bool condition)
            where TNode : SyntaxNode
        {
            var output = condition
                ? node.PrependNewLine()
                : node
                ;

            return output;
        }
    }
}